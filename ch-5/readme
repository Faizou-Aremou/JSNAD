## Function constructor
Appeler new sur une fonction js (vieux pattern pour constuire des objects, de plus les fonctions constructeurs sont écrits en lettre capitales), permet de creer un nouvelle object et lui passer le prototype de la fonction constructeur.
Si on veut juste passer le prototype de la fonction à une autre fonction, on peut faire de la manière suivante:
```
function inherit (proto) {
  function ChainLink(){}
  ChainLink.prototype = proto
  return new ChainLink()
}

Dog.prototype = inherit(Wolf.prototype)

```
ou 

```
function Dog (name) {
  Wolf.call(this, name + ' the dog')
}

Dog.prototype = Object.create(Wolf.prototype)

Dog.prototype.woof = function () {
  console.log(this.name + ': woof')
}
```
ou

```
const util = require('util')

function Dog (name) {
  Wolf.call(this, name + ' the dog')
}

Dog.prototype.woof = function () {
  console.log(this.name + ': woof')
}

util.inherits(Dog, Wolf)

```
dans du code contemporain, la manière suivante est observé pour réaliser la même chose

```
Object.setPrototypeOf(Dog.prototype, Wolf.prototype)

```

## Prototypal Inheritance (Class-Syntax Constructors)

## Closure Scope

When a function is created, an invisible object is also created, this is known as the closure scope. Parameters and variables created in the function are stored on this invisible object. 